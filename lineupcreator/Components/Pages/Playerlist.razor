@page "/playerlist"
@rendermode InteractiveServer
@inject lineupcreator.Components.Services.FootballDbContext DbContext

@using lineupcreator.Components.Data
@using Microsoft.EntityFrameworkCore
@using System.Linq.Dynamic.Core

<style>
    body{
        background-color:lightcyan;
    }
</style>

<h3>Player List</h3>
<div>

    <RadzenDataFilter @ref="dataFilter" Auto=auto Data="@players" TItem="Player" ViewChanged=@(view => playersGrid.Reload())>
        <Properties>
            <RadzenDataFilterProperty TItem="Player" Property="short_name" Title="Name" />
            <RadzenDataFilterProperty TItem="Player" Property="Club.club_name" Title="Club" />          
            <RadzenDataFilterProperty TItem="Player" Property="overall" Title="Overall" />
            <RadzenDataFilterProperty TItem="Player" Property="player_positions" Title="Positions" />
            <RadzenDataFilterProperty TItem="Player" Property="Nation.nationality_name" Title="Nationality" />
            <RadzenDataFilterProperty TItem="Player" Property="league_name" Title="League" />
            <RadzenDataFilterProperty TItem="Player" Property="height_cm" Title="Height" />
            <RadzenDataFilterProperty TItem="Player" Property="age" Title="Age" />
            <RadzenDataFilterProperty TItem="Player" Property="pace" Title="Pace" />
            <RadzenDataFilterProperty TItem="Player" Property="shooting" Title="Shooting"/>
            <RadzenDataFilterProperty TItem="Player" Property="passing" Title="Passing" />
            <RadzenDataFilterProperty TItem="Player" Property="dribbling" Title="Dribbling" />
            <RadzenDataFilterProperty TItem="Player" Property="defending" Title="Defending" />
            <RadzenDataFilterProperty TItem="Player" Property="physic" Title="Physicality" />
            <RadzenDataFilterProperty TItem="Player" Property="weak_foot" Title="Weak Foot" />
            <RadzenDataFilterProperty TItem="Player" Property="skill_moves" Title="Skill Moves" />
            <RadzenDataFilterProperty TItem="Player" Property="preferred_foot" Title="Preferred Foot" />
            <RadzenDataFilterProperty TItem="Player" Property="player_traits" Title="Traits" />
        </Properties>
    </RadzenDataFilter>


    <RadzenDataGrid @ref="playersGrid" AllowColumnResize="false" AllowSorting="true" PageSize="20" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@(filteredPlayers)" TItem="Player" ColumnWidth="300px" Count="@count" LoadData="@LoadData" IsLoading="@isLoading">
        <Columns>
            <RadzenDataGridColumn TItem="Player" Title="" Width="6px" Filterable="false">
                <Template Context="data">
                    <RadzenImage Path="@data.player_face_url" class="rz-gravatar" AlternateText="@(data.short_name)" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Player" Property="short_name" Title="Name" Width="15px" />
            <RadzenDataGridColumn TItem="Player" Title="" Width="7px" Filterable="false">
                <Template Context="data">
                    <RadzenImage Path="@data.Club.club_logo_url" class="rz-gravatar" AlternateText="@(data.Club.club_name)" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Player" Property="Club.club_name" Title="Club" Width="18px" />
            <RadzenDataGridColumn TItem="Player" Title="" Width="6px" Filterable="false">
                <Template Context="data">
                    <RadzenImage Path="@data.Nation.nation_flag_url" AlternateText="@(data.Nation.nationality_name)" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Player" Property="Nation.nationality_name" Title="Nation" Width="15px" />
            <RadzenDataGridColumn TItem="Player" Property="age" Title="Age" Width="10px" />
            <RadzenDataGridColumn TItem="Player" Property="height_cm" Title="Height(cm)" Width="13px" />
            <RadzenDataGridColumn TItem="Player" Property="player_positions" Title="POS" Width="10px" />
            <RadzenDataGridColumn TItem="Player" Property="overall" Title="OVR" Width="10px" />
            <RadzenDataGridColumn TItem="Player" Property="pace" Title="PAC" Width="10px" />
            <RadzenDataGridColumn TItem="Player" Property="shooting" Title="SHO" Width="7px" />
            <RadzenDataGridColumn TItem="Player" Property="passing" Title="PAS" Width="7px" />
            <RadzenDataGridColumn TItem="Player" Property="dribbling" Title="DRI" Width="7px" />
            <RadzenDataGridColumn TItem="Player" Property="defending" Title="DEF" Width="7px" />
            <RadzenDataGridColumn TItem="Player" Property="physic" Title="PHY" Width="8px" />
        </Columns>
    </RadzenDataGrid>
</div>
@code {

    

  

    bool auto = true;
    RadzenDataFilter<Player> dataFilter;

    IEnumerable<Player> filteredPlayers;
    IEnumerable<Player> players;
    RadzenDataGrid<Player> playersGrid;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        players = Enumerable.Empty<Player>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await dataFilter.AddFilter(new CompositeFilterDescriptor()
                {
                    Property = "Nation.nationality_name",
                    FilterValue = "Hungary",
                    FilterOperator = FilterOperator.Contains
                });
        }
    }

    bool isLoading;
    int count;

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        await Task.Yield();

        var query = DbContext.Players
            .AsNoTracking() // Disable lazy loading for this query
            .Include(p => p.Club)
            .Include(p => p.Nation)
            .AsQueryable();

        query = query.Where(dataFilter);

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            query = query.OrderBy(args.OrderBy);
        }

        count = query.Count();

        filteredPlayers = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();

        isLoading = false;
    }


}