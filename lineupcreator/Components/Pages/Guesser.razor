@page "/guesser"
@rendermode InteractiveServer
@inject RandomPlayerService playerService
@inject DialogService DialogService

<style>

    body{
        font-family: 'Comic Sans MS';
        font-size: 25px;
    }

    li {
        display: block;
        float: left;
        width: 130px;
        height: 130px;
        padding:10px 0;
        text-align: center;
        background-color: grey;
        border:solid 1px black;
    }

    ul {
        float: right;
        width:100%;

    }

    .guess-container {
        width:70%;
        float:right;

        font-size:18px;
    }

    .search-container{
        display:inline-block;
        float:left;
        width:300px;
    }

    .dropdown-content{
        background-color:white;
        border:solid 1px black;
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
    }

    .searched-players{
        border:solid 1px black;
    }

    .searched-players:hover{
            background-color: #69F06E;
    }

    input{
        width:300px;
        font-size:25px;
    }

    .logo{
        width:40px;
        height 40px;
    }

    .glowing-button{
        box-shadow:0px 0px 5px cyan,
        0px 0px 25px cyan, 
        0px 0px 50px cyan, 
        0px 0px 100px cyan;
    }

</style>
<RadzenDialog />
<div class="guess-container">
    @foreach (var guess in guessedPlayers)
    {
        <ul>
            <li style="background-color: @(guess.Result == "Correct guess!" ? "green" : "grey")">
                @guess.GuessedName
            </li>
            @if (guess.GuessedPlayerObject != null)
            {   
                <li style="background-color: @(ComparePositions(guess.GuessedPlayerObject.player_positions, currentPlayer.player_positions) == "Matches exactly" ? "green" : (ComparePositions(guess.GuessedPlayerObject.player_positions, currentPlayer.player_positions) == "Partially matches" ? "orange" : "grey"))">
                    @guess.GuessedPlayerObject.player_positions
                </li>
                <li style="background-color: @(Compare(guess.GuessedPlayerObject.nationality_name, currentPlayer.nationality_name) == "green" ? "green" : "grey")">
                    @guess.GuessedPlayerObject.nationality_name
                </li>
                <li style="background-color: @(Compare(guess.GuessedPlayerObject.club_name!, currentPlayer.club_name!) == "green" ? "green" : "grey")">
                    @guess.GuessedPlayerObject.club_name
                </li>
                <li style="background-color: @(Compare(guess.GuessedPlayerObject.league_name!, currentPlayer.league_name!) == "green" ? "green" : "grey")">
                    @guess.GuessedPlayerObject.league_name
                </li>
                <li style="background-color: @(CompareHigherLower(guess.GuessedPlayerObject.overall, currentPlayer.overall) == "Matches" ? "green" : "grey")">
                    @guess.GuessedPlayerObject.overall @if (CompareHigherLower(guess.GuessedPlayerObject.overall, currentPlayer.overall) != "Matches"){@CompareHigherLower(guess.GuessedPlayerObject.overall, currentPlayer.overall)}
                </li>
                <li style="background-color: @(CompareHigherLower(guess.GuessedPlayerObject.age, currentPlayer.age) == "Matches" ? "green" : "grey")">
                    @guess.GuessedPlayerObject.age @if (CompareHigherLower(guess.GuessedPlayerObject.age, currentPlayer.age) != "Matches"){@CompareHigherLower(guess.GuessedPlayerObject.age, currentPlayer.age)}
                </li>
            }
        </ul>
    }
</div>
<div class="search-container">
    <div style="@(IsDivClickable ? "pointer-events: auto;" : "pointer-events: none;")">
    @if (currentPlayer != null)
    {
        <div>
            <input type="text" @bind="guess" @oninput="SearchPlayers" placeholder="Enter your guess">
            <div class="dropdown-content">
                @foreach (var player in filteredPlayers)
                {
                    <div class="searched-players" @onclick="() => SelectPlayer(player)">@player.short_name <img class="logo "src="@player.club_logo_url"></div>
                }
            </div>
        </div>
    }
    else
    {
        <p>No player available</p>
    }
    </div>
    @if (IsDivClickable==false)
    {
        <button class="glowing-button" @onclick="FetchRandomPlayer">Get Another Random Player</button>
    }
    else
    {
        <button @onclick="FetchRandomPlayer">Get Another Random Player</button>
    }

    Win: @winCounter
    Lose: @loseCounter
    Streak: @streak   
    <!--<div class="rz-p-12 rz-text-align-center">
        <RadzenButton Text="Alert dialog" ButtonStyle="ButtonStyle.Secondary"
                      Click=@(args => DialogService.Alert("Some message!", "MyTitle", new AlertOptions() { OkButtonText = "Yes" })) />
    </div>-->
    @if (!IsDivClickable)
    {
        if (isWIn)
        {
            DialogService.Alert(@currentPlayer!.short_name, "You Won!", new AlertOptions() { OkButtonText = "Nice!" });
        }
        else
        {
            DialogService.Alert(@currentPlayer!.short_name+" was the answer", "You Lost!", new AlertOptions() { OkButtonText = "Okay :(" });
        }                                     
    }

</div>


@code {
    private Player currentPlayer;
    private string guess = "";
    private string guessResult = "";
    private int guessCounter=0;
    private int winCounter=0;
    private int loseCounter = 0;
    private int streak = 0;
    private bool IsDivClickable = true;
    private bool isWIn = false;
    private List<Player> filteredPlayers = new List<Player>();



    // Define a class to store the guessed player along with the guess result
    private class GuessedPlayer
    {
        public string GuessedName { get; set; }
        public Player GuessedPlayerObject { get; set; }
        public string Result { get; set; }
    }

    // List to store the guess results
    private List<GuessedPlayer> guessedPlayers = new List<GuessedPlayer>();

    protected override void OnInitialized()
    {
        FetchRandomPlayer(); // Fetch a random player when the component initializes
    }

    private void FetchRandomPlayer()
    {
        currentPlayer = playerService.GetRandomPlayer();
        guessedPlayers.Clear();
        IsDivClickable = true;
        guessCounter=0;
    }


    private void CheckGuess(Player selectedPlayer)
    {
        if (currentPlayer != null && selectedPlayer != null)
        {
            string result;
            if (guess.Trim().Equals(currentPlayer.short_name, StringComparison.OrdinalIgnoreCase))
            {
                result = "Correct guess!";
                IsDivClickable = false;
                guessCounter = 0;
                winCounter++;
                streak++;
                isWIn = true;
            }
            else
            {
                result = "Incorrect guess. Try again.";
                guessCounter++;
                if (guessCounter==6)
                {
                    IsDivClickable = false;
                    loseCounter++;
                    streak=0;
                    guessCounter = 0;
                    isWIn = false;
                }
            }

            // Add the guessed player along with the guess result to the list
            guessedPlayers.Add(new GuessedPlayer { GuessedName = guess, GuessedPlayerObject = selectedPlayer, Result = result });
        }
    }

    private void SearchPlayers(ChangeEventArgs e)
    {
        string searchText = e.Value.ToString().ToLower();
        filteredPlayers = playerService.SearchPlayers(searchText);
    }

    private void SelectPlayer(Player player)
    {
        guess = player.short_name;
        CheckGuess(player); // Pass the selected player object to the CheckGuess method
    }

    private string ComparePositions(string guessedPlayerPositions, string currentPlayerPositions)
    {
        // Prepare the position strings: split and trim spaces
        var splitGuessedPositions = guessedPlayerPositions.Split(',').Select(p => p.Trim()).ToList();
        var splitCurrentPositions = currentPlayerPositions.Split(',').Select(p => p.Trim()).ToList();

        // Determine if there is an exact match
        bool exactMatch = splitGuessedPositions.Count == splitCurrentPositions.Count &&
                          splitGuessedPositions.All(splitCurrentPositions.Contains);

        // Determine if there is at least one matching position
        bool partialMatch = splitGuessedPositions.Any(gp => splitCurrentPositions.Contains(gp));

        // Return the result based on the matches found
        if (exactMatch)
            return "Matches exactly";
        else if (partialMatch)
            return "Partially matches";
        else
            return "Does not match";
    }

    private string CompareHigherLower(float? n, float? m)
    {
        if (n > m)
        {
            return "Lower";
        }
        else if (n < m)
        {
            return "Higher";
        }
        else
        {
            return "Matches";
        }



    }

    private string Compare(string a, string b)
    {
        if (a == b)
        {
            return "green";
        }
        return "grey";
    }
}