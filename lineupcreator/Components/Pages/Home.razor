@page "/"
@rendermode InteractiveServer
@using System.Net
@using System.IO.Compression
@using System.Data.SqlClient
@using ChoETL
@using System.Text
@using System.Data
@inject IConfiguration Configuration

<PageTitle>UpdateDatabase</PageTitle>

<h1>Hello, world!</h1>

<button onclick="@UpdateDatabase">Update Database</button>

@code
{
    public class PlayerData
    {
        public float sofifa_id { get; set; }
        public string player_url { get; set; }
        public string short_name { get; set; }
        public string long_name { get; set; }
        public float overall { get; set; }
        public string player_positions { get; set; }
        public float age { get; set; }
        public float height_cm { get; set; }
        public float? club_team_id { get; set; }
        public string? club_name { get; set; }
        public string? league_name { get; set; }
        public float? club_jersey_number { get; set; }
        public float nationality_id { get; set; }
        public string nationality_name { get; set; }
        public string preferred_foot { get; set; }
        public float weak_foot { get; set; }
        public float skill_moves { get; set; }
        public string work_rate { get; set; }
        public string? player_traits { get; set; }
        public float? pace { get; set; }
        public float? shooting { get; set; }
        public float? passing { get; set; }
        public float? dribbling { get; set; }
        public float? defending { get; set; }
        public float? physic { get; set; }
        public string player_face_url { get; set; }
        public string? club_logo_url { get; set; }
        public string? nation_logo_url { get; set; }
        public string? nation_flag_url { get; set; }
        public string club_flag_url { get; set; }
        public string? club_position { get; set; }
        public string? nation_team_id { get; set; }
    }

    void UpdateDatabase()
    {
        int rowCountUpdated = 0;
        int totalRows = 0;
        int processedRows = 0;

        using (var client = new WebClient())
        {
            string url = "https://www.kaggle.com/api/v1/datasets/download/stefanoleone992/fifa-22-complete-player-dataset/players_22.csv";
            string tempFilePath = Path.GetTempFileName();

            try
            {
                Console.WriteLine("Starting database update...");

                client.DownloadFile(url, tempFilePath);

                Console.WriteLine("Downloading file...");
                Console.WriteLine("Reading CSV file...");

                using (var archive = ZipFile.OpenRead(tempFilePath))
                {
                    var entry = archive.Entries.FirstOrDefault(e => e.Name.EndsWith(".csv", StringComparison.OrdinalIgnoreCase));
                    if (entry != null)
                    {
                        using (var stream = entry.Open())
                        using (var sr = new StreamReader(stream, Encoding.UTF8))
                        {
                            string connectionString = Configuration.GetConnectionString("Mydb")!;
                            using (var csvReader = new ChoCSVReader(sr).WithFirstLineHeader())
                            {
                                var selectedColumns = csvReader
                                    .Select(r => new PlayerData
                                        {
                                            sofifa_id = ConvertToFloat(r["sofifa_id"], "sofifa_id", r as Dictionary<string, object>),
                                            player_url = ConvertToString(r["player_url"]),
                                            short_name = ConvertToString(r["short_name"]),
                                            long_name = ConvertToString(r["long_name"]),
                                            player_positions = ConvertToString(r["player_positions"]),
                                            overall = ConvertToFloat(r["overall"], "overall", r as Dictionary<string, object>),
                                            age = ConvertToFloat(r["age"], "age", r as Dictionary<string, object>),
                                            height_cm = ConvertToFloat(r["height_cm"], "height_cm", r as Dictionary<string, object>),
                                            club_team_id = ConvertToFloat(r["club_team_id"], "club_team_id", r as Dictionary<string, object>),
                                            club_name = ConvertToString(r["club_name"]),
                                            league_name = ConvertToString(r["league_name"]),
                                            club_position = ConvertToString(r["club_position"]),
                                            club_jersey_number = ConvertToFloat(r["club_jersey_number"], "club_jersey_number", r as Dictionary<string, object>),
                                            nationality_id = ConvertToFloat(r["nationality_id"], "nationality_id", r as Dictionary<string, object>),
                                            nationality_name = ConvertToString(r["nationality_name"]),
                                            nation_team_id = ConvertToString(r["nation_team_id"]),
                                            preferred_foot = ConvertToString(r["preferred_foot"]),
                                            weak_foot = ConvertToFloat(r["weak_foot"], "weak_foot", r as Dictionary<string, object>),
                                            skill_moves = ConvertToFloat(r["skill_moves"], "skill_moves", r as Dictionary<string, object>),
                                            work_rate = ConvertToString(r["work_rate"]),
                                            player_traits = ConvertToString(r["player_traits"]),
                                            pace = ConvertToFloat(r["pace"], "pace", r as Dictionary<string, object>),
                                            shooting = ConvertToFloat(r["shooting"], "shooting", r as Dictionary<string, object>),
                                            passing = ConvertToFloat(r["passing"], "passing", r as Dictionary<string, object>),
                                            dribbling = ConvertToFloat(r["dribbling"], "dribbling", r as Dictionary<string, object>),
                                            defending = ConvertToFloat(r["defending"], "defending", r as Dictionary<string, object>),
                                            physic = ConvertToFloat(r["physic"], "physic", r as Dictionary<string, object>),
                                            player_face_url = ConvertToString(r["player_face_url"]),
                                            club_logo_url = ConvertToString(r["club_logo_url"]),
                                            club_flag_url = ConvertToString(r["club_flag_url"]),
                                            nation_logo_url = ConvertToString(r["nation_logo_url"]),
                                            nation_flag_url = ConvertToString(r["nation_flag_url"])
                                            // Map other properties similarly
                                        })
                                    .ToList();

                                totalRows = selectedColumns?.Count ?? 0;

                                Console.WriteLine($"Selected {totalRows} rows from the CSV file.");

                                if (selectedColumns != null && selectedColumns.Any())
                                {
                                    using (var connection = new SqlConnection(connectionString))
                                    {
                                        connection.Open();
                                        Console.WriteLine("Updating Database...");
                                        // Iterate through each record in the CSV file
                                        foreach (var item in selectedColumns)
                                        {
                                            processedRows++;
                                            // Check if the row already exists in the database based on the primary key
                                            bool rowExists = CheckRowExistsInDatabase(connection, item.sofifa_id);

                                            if (rowExists)
                                            {
                                                UpdateExistingRowInDatabase(connection, item);
                                                rowCountUpdated++;
                                            }
                                            else
                                            {
                                                InsertRowIntoDatabase(connection, item);
                                                rowCountUpdated++;
                                            }

                                            if (processedRows % 1000 == 0 || processedRows == totalRows)
                                            {
                                                Console.WriteLine($"Processed {processedRows} of {totalRows} rows...");
                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    Console.WriteLine("No data selected from the CSV file.");
                                }
                            }
                        }
                    }
                    else
                    {
                        Console.WriteLine("CSV file not found in the ZIP archive.");
                    }
                }
                Console.WriteLine($"Database update completed. {rowCountUpdated} rows updated.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
            finally
            {
                File.Delete(tempFilePath);
            }
        }
    }

    bool CheckRowExistsInDatabase(SqlConnection connection, float sofifaId)
    {
        // Query the database to check if a row with the given primary key exists
        using (var command = new SqlCommand($"SELECT COUNT(*) FROM playerstable$ WHERE sofifa_id = @sofifaId", connection))
        {
            command.Parameters.AddWithValue("@sofifaId", sofifaId);
            int count = (int)command.ExecuteScalar();
            return count > 0;
        }
    }

    void UpdateExistingRowInDatabase(SqlConnection connection, PlayerData newData)
    {
        try
        {
            // Update the existing row in the database based on the primary key
            using (var command = new SqlCommand(@"UPDATE playerstable$
                                       SET player_url = @playerUrl,
                                           short_name = @shortName,
                                           long_name = @longName,
                                           overall = @overall,
                                           player_positions = @playerPositions,
                                           age = @age,
                                           height_cm = @heightCm,
                                           club_team_id = @clubTeamId,
                                           club_name = @clubName,
                                           league_name = @leagueName,
                                           club_position = @clubPosition,
                                           club_jersey_number = @clubJerseyNumber,
                                           nationality_id = @nationalityId,
                                           nationality_name = @nationalityName,
                                           nation_team_id = @nationTeamId,
                                           preferred_foot = @preferredFoot,
                                           weak_foot = @weakFoot,
                                           skill_moves = @skillMoves,
                                           work_rate = @workRate,
                                           player_traits = @playerTraits,
                                           pace = @pace,
                                           shooting = @shooting,
                                           passing = @passing,
                                           dribbling = @dribbling,
                                           defending = @defending,
                                           physic = @physic,
                                           player_face_url = @playerFaceUrl,
                                           club_logo_url = @clubLogoUrl,
                                           club_flag_url = @clubFlagUrl,
                                           nation_logo_url = @nationLogoUrl,
                                           nation_flag_url = @nationFlagUrl
                                       WHERE sofifa_id = @sofifaId", connection))
            {
                command.Parameters.AddWithValue("@playerUrl", newData.player_url);
                command.Parameters.AddWithValue("@shortName", newData.short_name);
                command.Parameters.AddWithValue("@longName", newData.long_name);
                command.Parameters.AddWithValue("@overall", newData.overall);
                command.Parameters.AddWithValue("@playerPositions", newData.player_positions);
                command.Parameters.AddWithValue("@age", newData.age);
                command.Parameters.AddWithValue("@heightCm", newData.height_cm);
                command.Parameters.AddWithValue("@clubTeamId", (object)newData.club_team_id ?? DBNull.Value);
                command.Parameters.AddWithValue("@clubName", (object)newData.club_name ?? DBNull.Value);
                command.Parameters.AddWithValue("@leagueName", (object)newData.league_name ?? DBNull.Value);
                command.Parameters.AddWithValue("@clubPosition", (object)newData.club_position ?? DBNull.Value);
                command.Parameters.AddWithValue("@clubJerseyNumber", (object)newData.club_jersey_number ?? DBNull.Value);
                command.Parameters.AddWithValue("@nationalityId", (object)newData.nationality_id ?? DBNull.Value);
                command.Parameters.AddWithValue("@nationalityName", newData.nationality_name);
                command.Parameters.AddWithValue("@nationTeamId", (object)newData.nation_team_id ?? DBNull.Value);
                command.Parameters.AddWithValue("@preferredFoot", newData.preferred_foot);
                command.Parameters.AddWithValue("@weakFoot", newData.weak_foot);
                command.Parameters.AddWithValue("@skillMoves", newData.skill_moves);
                command.Parameters.AddWithValue("@workRate", newData.work_rate);
                command.Parameters.AddWithValue("@playerTraits", (object)newData.player_traits ?? DBNull.Value);
                command.Parameters.AddWithValue("@pace", (object)newData.pace ?? DBNull.Value);
                command.Parameters.AddWithValue("@shooting", (object)newData.shooting ?? DBNull.Value);
                command.Parameters.AddWithValue("@passing", (object)newData.passing ?? DBNull.Value);
                command.Parameters.AddWithValue("@dribbling", (object)newData.dribbling ?? DBNull.Value);
                command.Parameters.AddWithValue("@defending", (object)newData.defending ?? DBNull.Value);
                command.Parameters.AddWithValue("@physic", (object)newData.physic ?? DBNull.Value);
                command.Parameters.AddWithValue("@playerFaceUrl", newData.player_face_url);
                command.Parameters.AddWithValue("@clubLogoUrl", (object)newData.club_logo_url ?? DBNull.Value);
                command.Parameters.AddWithValue("@clubFlagUrl", (object)newData.club_flag_url ?? DBNull.Value);
                command.Parameters.AddWithValue("@nationLogoUrl", (object)newData.nation_logo_url ?? DBNull.Value);
                command.Parameters.AddWithValue("@nationFlagUrl", (object)newData.nation_flag_url ?? DBNull.Value);
                // Add parameters for other columns
                command.Parameters.AddWithValue("@sofifaId", newData.sofifa_id);
                int rowsAffected = command.ExecuteNonQuery();

                if (rowsAffected > 0)
                {
                    //Console.WriteLine($"Update completed for: {newData.short_name}");
                }
                else
                {
                    Console.WriteLine($"No rows updated for: {newData.short_name}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating player with sofifa_id {newData.sofifa_id}: {ex.Message}");
        }
    }




    void InsertRowIntoDatabase(SqlConnection connection, PlayerData newData)
    {
        try
        {
            // Insert a new row into the database
            using (var command = new SqlCommand(@"INSERT INTO playerstable$ (sofifa_id, player_url, short_name, long_name, player_positions, overall, age, height_cm, club_team_id, club_name, league_name, club_position, club_jersey_number, nationality_id, nationality_name, nation_team_id, preferred_foot, weak_foot, skill_moves, work_rate, player_traits, pace, shooting, passing, dribbling, defending, physic, player_face_url, club_logo_url, club_flag_url, nation_logo_url, nation_flag_url)
                                           VALUES (@sofifaId, @playerUrl, @shortName, @longName, @playerPositions, @overall, @age, @heightCm, @clubTeamId, @clubName, @leagueName, @clubPosition, @clubJerseyNumber, @nationalityId, @nationalityName, @nationTeamId, @preferredFoot, @weakFoot, @skillMoves, @workRate, @playerTraits, @pace, @shooting, @passing, @dribbling, @defending, @physic, @playerFaceUrl, @clubLogoUrl, @clubFlagUrl, @nationLogoUrl, @nationFlagUrl)"
                                              , connection))
            {
                command.Parameters.AddWithValue("@sofifaId", newData.sofifa_id);
                command.Parameters.AddWithValue("@playerUrl", newData.player_url);
                command.Parameters.AddWithValue("@shortName", newData.short_name);
                command.Parameters.AddWithValue("@longName", newData.long_name);
                command.Parameters.AddWithValue("@overall", newData.overall);
                command.Parameters.AddWithValue("@playerPositions", newData.player_positions);
                command.Parameters.AddWithValue("@age", newData.age);
                command.Parameters.AddWithValue("@heightCm", newData.height_cm);
                command.Parameters.AddWithValue("@clubTeamId", (object)newData.club_team_id ?? DBNull.Value);
                command.Parameters.AddWithValue("@clubName", (object)newData.club_name ?? DBNull.Value);
                command.Parameters.AddWithValue("@leagueName", (object)newData.league_name ?? DBNull.Value);
                command.Parameters.AddWithValue("@clubPosition", (object)newData.club_position ?? DBNull.Value);
                command.Parameters.AddWithValue("@clubJerseyNumber", (object)newData.club_jersey_number ?? DBNull.Value);
                command.Parameters.AddWithValue("@nationalityId", (object)newData.nationality_id ?? DBNull.Value);
                command.Parameters.AddWithValue("@nationalityName", newData.nationality_name);
                command.Parameters.AddWithValue("@nationTeamId", (object)newData.nation_team_id ?? DBNull.Value);
                command.Parameters.AddWithValue("@preferredFoot", newData.preferred_foot);
                command.Parameters.AddWithValue("@weakFoot", newData.weak_foot);
                command.Parameters.AddWithValue("@skillMoves", newData.skill_moves);
                command.Parameters.AddWithValue("@workRate", newData.work_rate);
                command.Parameters.AddWithValue("@playerTraits", (object)newData.player_traits ?? DBNull.Value);
                command.Parameters.AddWithValue("@pace", (object)newData.pace ?? DBNull.Value);
                command.Parameters.AddWithValue("@shooting", (object)newData.shooting ?? DBNull.Value);
                command.Parameters.AddWithValue("@passing", (object)newData.passing ?? DBNull.Value);
                command.Parameters.AddWithValue("@dribbling", (object)newData.dribbling ?? DBNull.Value);
                command.Parameters.AddWithValue("@defending", (object)newData.defending ?? DBNull.Value);
                command.Parameters.AddWithValue("@physic", (object)newData.physic ?? DBNull.Value);
                command.Parameters.AddWithValue("@playerFaceUrl", newData.player_face_url);
                command.Parameters.AddWithValue("@clubLogoUrl", (object)newData.club_logo_url ?? DBNull.Value);
                command.Parameters.AddWithValue("@clubFlagUrl", (object)newData.club_flag_url ?? DBNull.Value);
                command.Parameters.AddWithValue("@nationLogoUrl", (object)newData.nation_logo_url ?? DBNull.Value);
                command.Parameters.AddWithValue("@nationFlagUrl", (object)newData.nation_flag_url ?? DBNull.Value);
                // Add parameters for other columns

                int rowsAffected = command.ExecuteNonQuery();

                if (rowsAffected > 0)
                {
                    Console.WriteLine($"Insert completed for : {newData.short_name}");
                }
                else
                {
                    Console.WriteLine($"No rows inserted for : {newData.short_name}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error inserting player with sofifa_id {newData.sofifa_id}: {ex.Message}");
        }
    }



    float? ConvertToFloat(object value, string columnName, Dictionary<string, object> row)
    {
        if (value == null || value == DBNull.Value)
            return null;

        if (float.TryParse(value.ToString(), out float result))
        {
            return result;
        }

        // Handle specific properties that are represented as strings in the CSV
        if (columnName == "pace" || columnName == "shooting" || columnName == "passing" ||
            columnName == "dribbling" || columnName == "defending" || columnName == "physic")
        {
            // Log the problematic value for further analysis
            Console.WriteLine($"Error converting value '{value}' from column '{columnName}' to float in row: {string.Join(",", row.Select(kv => $"{kv.Key}={kv.Value}"))}");

            // Return null for the problematic value
            return null;
        }

        // Log the problematic value
        Console.WriteLine($"Error converting value '{value}' from column '{columnName}' to float in row: {string.Join(",", row.Select(kv => $"{kv.Key}={kv.Value}"))}");

        // Return null for the problematic value
        return null;
    }

    string ConvertToString(string value)
    {
        return string.IsNullOrWhiteSpace(value) ? null : value;
    }
}